{
  "if err != nil": {
    "prefix": "iferr",
    "body": "if err != nil {\n\t${1}\n}",
    "description": "Snippet for if err != nil"
  },
  "if err != nil { panic (err) } ": {
    "prefix": "iferrp",
    "body": "if err != nil {\n\tpanic(err)\n}\n${1}",
    "description": "Snippet for if err != nil { panic(err) }"
  },
  "if err != nil { log.Fatal (err) } ": {
    "prefix": "iferrf",
    "body": "if err != nil {\n\tlog.Fatal(err)\n}\n${1}",
    "description": "Snippet for if err != nil { log.Fatal(err) }"
  },
  "Redis get": {
    "prefix": "redisget",
    "body": "rc.Do(context.TODO(), rc.B().Get().Key(key).Build()).AsBytes()",
    "description": "Snippet for redis/rueidis GET"
  },
  "Redis get cache": {
    "prefix": "redisgetc",
    "body": "rc.DoCache(context.TODO(), rc.B().Get().Key(key).Cache(), cacheTTL).AsBytes()",
    "description": "Snippet for redis/rueidis GET cache"
  },
  "Redis mget": {
    "prefix": "redismget",
    "body": "rc.Do(context.TODO(), rc.B().Mget().Key(key1, key2).Build()).ToArray()",
    "description": "Snippet for redis/rueidis MGET"
  },
  "Redis mget cache": {
    "prefix": "redismgetc",
    "body": "rc.DoCache(context.TODO(), rc.B().Mget().Key(key1, key2).Cache(), cacheTTL).ToArray()",
    "description": "Snippet for redis/rueidis MGET cache"
  },
  "Redis set": {
    "prefix": "redisset",
    "body": "rc.Do(context.TODO(), rc.B().Set().Key(key).Value(rueidis.BinaryString(value)).Build()).Error()",
    "description": "Snippet for redis/rueidis SET"
  },
  "Redis del": {
    "prefix": "redisdel",
    "body": "rc.Do(context.TODO(), rc.B().Del().Key(key).Build()).Error()",
    "description": "Snippet for redis/rueidis DEL"
  }
}
